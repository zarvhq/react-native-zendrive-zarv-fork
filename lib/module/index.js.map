{"version":3,"names":["NativeModules","Platform","Image","ZendriveErrorCode","RNEventHandler","AndroidPermissionsHandler","IOSPermissionsHandler","Zendrive","ZendriveInsurance","ZendriveFeedback","ZendriveDebug","ZendriveNativeModule","ZendriveInsuranceNativeModule","ZendriveFeedbackNativeModule","ZendriveDebugNativeModule","ZendriveDebugImpl","identifier","isZendriveSessionIdentifier","handleEventsForBackgroundURLSession","zendriveConfiguration","notificationConfiguration","OS","uploadAllZendriveData","ZendriveFeedbackImpl","driveId","category","addDriveCategory","eventTimestamp","eventType","occurrence","addEventOccurrence","ZendriveInsuranceImpl","startDriveWithPeriod1","trackingId","startDriveWithPeriod2","err","isSuccess","errorCode","INVALID_PARAMS","errorMessage","Promise","resolve","startDriveWithPeriod3","stopPeriod","ZendriveImpl","eventHandlers","nativeEventHandler","callbackHandler","_insurance","_feedback","_debug","_permissions","getActiveDriveInfo","getBuildVersion","getEventSupportForDevice","getZendriveSettings","isAccidentDetectionSupported","isSDKSetup","input","isValidInputParameter","resume","configuration","notificationSettings","inDriveSettings","smallIcon","resolveAssetSource","uri","mayBeInDriveSettings","waitingForDriveSettings","managesLocationPermission","__DEV__","console","warn","managesActivityPermission","setup","driveDetectionMode","setZendriveDriveDetectionMode","startDrive","sessionId","startSession","refreshBusinessHours","autoTrackingPausedReason","stopManualDrive","stopSession","teardown","confidence","triggerMockAccident","config","triggerMockPotentialAccident","uploadAllDebugDataAndLogs","wipeOut","getZendriveState","attributes","Error","getZendriveDriverCustomAttributes","vehicleInfo","associateVehicle","vehicleId","dissociateVehicle","getAssociatedVehicles","getBluetoothPairedDevices","uuid","getNearbyBeacons","major","minor","getNearbyBeaconsWithRange","pausedTillTimestamp","pauseAutoDriveTracking","resumeAutoDriveTracking","isAutoTripTrackingPaused","sdkHealthReason","logSDKHealth","handler","length","event","forEach","fn","register","push","filter","item","unregister","ZendriveSDK"],"sources":["index.ts"],"sourcesContent":["import { NativeModules, Platform, Image } from 'react-native';\nimport {\n  Zendrive as IZendrive,\n  ZendriveDebug as IZendriveDebug,\n  ZendrivePermissions as IZendrivePermissions,\n} from './sdk/Zendrive';\nimport {\n  ActiveDriveInfo,\n  ZendriveEventType,\n  ZendriveSettings,\n  ZendriveConfiguration,\n  ZendriveOperationResult,\n  ZendriveDriveDetectionMode,\n  ZendriveAccidentConfidence,\n  ZendriveState,\n  NotificationConfig,\n  ZendriveVehicleInfo,\n  ZendriveVehicleTaggingOperationResult,\n  ZendriveBluetoothDevice,\n  ZendriveScannedBeaconInfo,\n  ZendrivePauseAutoTrackingReason,\n  ZendriveSDKHealthReason,\n} from './sdk/Infos';\nimport { ZendriveErrorCode } from './sdk/Errors';\nimport {\n  ZendriveCallbackEventHandler,\n  ZendriveCallbackEvent,\n} from './sdk/Events';\nimport RNEventHandler from './RNEventHandler';\nimport { ZendriveInsurance as IZendriveInsurance } from './sdk/Insurance';\nimport {\n  ZendriveFeedback as IZendriveFeedback,\n  ZendriveFeedbackDriveCategory,\n} from './sdk/Feedback';\nimport AndroidPermissionsHandler from './AndroidPermissionsHandler';\nimport IOSPermissionsHandler from './IOSPermissionsHandler';\n\nexport * from './sdk/Infos';\nexport * from './sdk/Errors';\nexport * from './sdk/Insurance';\nexport * from './sdk/Events';\nexport * from './sdk/Feedback';\n\nconst {\n  Zendrive,\n  ZendriveInsurance,\n  ZendriveFeedback,\n  ZendriveDebug,\n} = NativeModules as any;\nconst ZendriveNativeModule: IZendrive = Zendrive;\nconst ZendriveInsuranceNativeModule: IZendriveInsurance = ZendriveInsurance;\nconst ZendriveFeedbackNativeModule: IZendriveFeedback = ZendriveFeedback;\nconst ZendriveDebugNativeModule: IZendriveDebug = ZendriveDebug;\n\n/**\n * @inheritdoc\n */\nclass ZendriveDebugImpl implements IZendriveDebug {\n  isZendriveSessionIdentifier(\n    identifier: string\n  ): Promise<ZendriveOperationResult> {\n    return ZendriveDebugNativeModule.isZendriveSessionIdentifier(identifier);\n  }\n  handleEventsForBackgroundURLSession(\n    identifier: string\n  ): Promise<ZendriveOperationResult> {\n    return ZendriveDebugNativeModule.handleEventsForBackgroundURLSession(\n      identifier\n    );\n  }\n  uploadAllZendriveData(\n    zendriveConfiguration: ZendriveConfiguration,\n    notificationConfiguration?: NotificationConfig\n  ): Promise<ZendriveOperationResult> {\n    if (Platform.OS === 'ios') {\n      return ZendriveDebugNativeModule.uploadAllZendriveData(\n        zendriveConfiguration\n      );\n    }\n    return ZendriveDebugNativeModule.uploadAllZendriveData(\n      zendriveConfiguration,\n      notificationConfiguration\n    );\n  }\n}\n\n/**\n * @inheritdoc\n */\nclass ZendriveFeedbackImpl implements IZendriveFeedback {\n  addDriveCategory(\n    driveId: string,\n    category: ZendriveFeedbackDriveCategory\n  ): Promise<boolean> {\n    return ZendriveFeedbackNativeModule.addDriveCategory(driveId, category);\n  }\n  addEventOccurrence(\n    driveId: string,\n    eventTimestamp: number,\n    eventType: ZendriveEventType,\n    occurrence: boolean\n  ): Promise<boolean> {\n    return ZendriveFeedbackNativeModule.addEventOccurrence(\n      driveId,\n      eventTimestamp,\n      eventType,\n      occurrence\n    );\n  }\n}\n/**\n * @inheritdoc\n */\nclass ZendriveInsuranceImpl implements IZendriveInsurance {\n  startDriveWithPeriod1(): Promise<ZendriveOperationResult> {\n    return ZendriveInsuranceNativeModule.startDriveWithPeriod1();\n  }\n  startDriveWithPeriod2(trackingId: String): Promise<ZendriveOperationResult> {\n    if (trackingId) {\n      return ZendriveInsuranceNativeModule.startDriveWithPeriod2(trackingId);\n    } else {\n      let err: ZendriveOperationResult = {\n        isSuccess: false,\n        errorCode: ZendriveErrorCode.INVALID_PARAMS,\n        errorMessage: 'trackingId cannot be empty',\n      };\n      return Promise.resolve(err);\n    }\n  }\n  startDriveWithPeriod3(trackingId: String): Promise<ZendriveOperationResult> {\n    if (trackingId) {\n      return ZendriveInsuranceNativeModule.startDriveWithPeriod3(trackingId);\n    } else {\n      let err: ZendriveOperationResult = {\n        isSuccess: false,\n        errorCode: ZendriveErrorCode.INVALID_PARAMS,\n        errorMessage: 'trackingId cannot be empty',\n      };\n      return Promise.resolve(err);\n    }\n  }\n  stopPeriod(): Promise<ZendriveOperationResult> {\n    return ZendriveInsuranceNativeModule.stopPeriod();\n  }\n}\n\n/**\n * @inheritdoc\n */\nclass ZendriveImpl implements IZendrive {\n  private eventHandlers: Array<ZendriveCallbackEventHandler> = [];\n  private nativeEventHandler: RNEventHandler = new RNEventHandler();\n  private callbackHandler: ZendriveCallbackEventHandler = () => {};\n  private _insurance: IZendriveInsurance = new ZendriveInsuranceImpl();\n  private _feedback: IZendriveFeedback = new ZendriveFeedbackImpl();\n  private _debug: IZendriveDebug = new ZendriveDebugImpl();\n  private _permissions: IZendrivePermissions =\n    Platform.OS === 'android'\n      ? new AndroidPermissionsHandler()\n      : new IOSPermissionsHandler();\n\n  getActiveDriveInfo(): Promise<ActiveDriveInfo | undefined> {\n    return ZendriveNativeModule.getActiveDriveInfo();\n  }\n  getBuildVersion(): Promise<string> {\n    return ZendriveNativeModule.getBuildVersion();\n  }\n  getEventSupportForDevice(): Promise<Map<ZendriveEventType, boolean>> {\n    return ZendriveNativeModule.getEventSupportForDevice();\n  }\n  getZendriveSettings(): Promise<ZendriveSettings | undefined> {\n    return ZendriveNativeModule.getZendriveSettings();\n  }\n  isAccidentDetectionSupported(): Promise<boolean> {\n    return ZendriveNativeModule.isAccidentDetectionSupported();\n  }\n  isSDKSetup(): Promise<boolean> {\n    return ZendriveNativeModule.isSDKSetup();\n  }\n  isValidInputParameter(input: string): Promise<boolean> {\n    if (input) {\n      return ZendriveNativeModule.isValidInputParameter(input);\n    } else {\n      return Promise.resolve(false);\n    }\n  }\n  resume(): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.resume();\n  }\n  setup(\n    configuration: ZendriveConfiguration\n  ): Promise<ZendriveOperationResult> {\n    if (configuration.notificationSettings) {\n      if (\n        configuration.notificationSettings.inDriveSettings &&\n        configuration.notificationSettings.inDriveSettings.smallIcon\n      ) {\n        configuration.notificationSettings.inDriveSettings.smallIcon = Image.resolveAssetSource(\n          configuration.notificationSettings.inDriveSettings.smallIcon as any\n        ).uri;\n      }\n      if (\n        configuration.notificationSettings.mayBeInDriveSettings &&\n        configuration.notificationSettings.mayBeInDriveSettings.smallIcon\n      ) {\n        configuration.notificationSettings.mayBeInDriveSettings.smallIcon = Image.resolveAssetSource(\n          configuration.notificationSettings.mayBeInDriveSettings\n            .smallIcon as any\n        ).uri;\n      }\n\n      if (\n        configuration.notificationSettings.waitingForDriveSettings &&\n        configuration.notificationSettings.waitingForDriveSettings.smallIcon\n      ) {\n        configuration.notificationSettings.waitingForDriveSettings.smallIcon = Image.resolveAssetSource(\n          configuration.notificationSettings.waitingForDriveSettings\n            .smallIcon as any\n        ).uri;\n      }\n    }\n    if (\n      configuration.managesLocationPermission === true &&\n      Platform.OS === 'ios' &&\n      __DEV__\n    ) {\n      console.warn('managesLocationPermission is deprecated.');\n    }\n    if (\n      configuration.managesActivityPermission === true &&\n      Platform.OS === 'ios' &&\n      __DEV__\n    ) {\n      console.warn('managesActivityPermission is deprecated.');\n    }\n    return ZendriveNativeModule.setup(configuration);\n  }\n  setZendriveDriveDetectionMode(\n    driveDetectionMode: ZendriveDriveDetectionMode\n  ): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.setZendriveDriveDetectionMode(\n      driveDetectionMode\n    );\n  }\n  startDrive(\n    trackingId?: string | undefined\n  ): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.startDrive(trackingId || '');\n  }\n  startSession(sessionId: string): Promise<ZendriveOperationResult> {\n    if (sessionId) {\n      return ZendriveNativeModule.startSession(sessionId);\n    } else {\n      let err: ZendriveOperationResult = {\n        isSuccess: false,\n        errorCode: ZendriveErrorCode.INVALID_PARAMS,\n        errorMessage: 'session id cannot be empty',\n      };\n      return Promise.resolve(err);\n    }\n  }\n\n  refreshBusinessHours(): Promise<any> {\n    return ZendriveNativeModule.refreshBusinessHours();\n  }\n\n  autoTrackingPausedReason(): Promise<\n    ZendrivePauseAutoTrackingReason | undefined\n  > {\n    return ZendriveNativeModule.autoTrackingPausedReason();\n  }\n  stopManualDrive(): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.stopManualDrive();\n  }\n  stopSession(): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.stopSession();\n  }\n  teardown(): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.teardown();\n  }\n  triggerMockAccident(\n    confidence: ZendriveAccidentConfidence\n  ): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.triggerMockAccident(confidence);\n  }\n  triggerMockPotentialAccident(config: {\n    delayBetweenCallbacksSeconds: number;\n    finalCallbackConfidence: ZendriveAccidentConfidence;\n    finalCallbackConfidenceNumber: number;\n    potentialCallbackConfidence: ZendriveAccidentConfidence;\n    potentialCallbackConfidenceNumber: number;\n  }): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.triggerMockPotentialAccident(config);\n  }\n  uploadAllDebugDataAndLogs(): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.uploadAllDebugDataAndLogs();\n  }\n  wipeOut(): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.wipeOut();\n  }\n  getZendriveState(): Promise<ZendriveState | undefined> {\n    return ZendriveNativeModule.getZendriveState();\n  }\n  insurance(): IZendriveInsurance {\n    return this._insurance;\n  }\n  feedback(): IZendriveFeedback {\n    return this._feedback;\n  }\n  debug(): IZendriveDebug {\n    return this._debug;\n  }\n  permissions(): IZendrivePermissions {\n    return this._permissions;\n  }\n  getZendriveDriverCustomAttributes(\n    attributes: [string]\n  ): Promise<{ [x: string]: string } | null> {\n    if (Platform.OS === 'ios') {\n      throw new Error(\n        'not supported on ios platform, configuration already provides custom attributes'\n      );\n    }\n    return ZendriveNativeModule.getZendriveDriverCustomAttributes(attributes);\n  }\n  associateVehicle(\n    vehicleInfo: ZendriveVehicleInfo\n  ): Promise<ZendriveVehicleTaggingOperationResult> {\n    return ZendriveNativeModule.associateVehicle(vehicleInfo);\n  }\n  dissociateVehicle(\n    vehicleId: string\n  ): Promise<ZendriveVehicleTaggingOperationResult> {\n    return ZendriveNativeModule.dissociateVehicle(vehicleId);\n  }\n  getAssociatedVehicles(): Promise<[ZendriveVehicleInfo]> {\n    return ZendriveNativeModule.getAssociatedVehicles();\n  }\n  getBluetoothPairedDevices(): Promise<[ZendriveBluetoothDevice]> {\n    return ZendriveNativeModule.getBluetoothPairedDevices();\n  }\n\n  getNearbyBeacons(uuid: string): Promise<[ZendriveScannedBeaconInfo]> {\n    return ZendriveNativeModule.getNearbyBeacons(uuid);\n  }\n\n  getNearbyBeaconsWithRange(\n    uuid: string,\n    major: number,\n    minor: number\n  ): Promise<[ZendriveScannedBeaconInfo]> {\n    return ZendriveNativeModule.getNearbyBeaconsWithRange(uuid, major, minor);\n  }\n\n  // isTaggedByBluetooth(driveInfo: DriveInfo): Promise<boolean> {\n  //   return ZendriveNativeModule.isTaggedByBluetooth(driveInfo);\n  // }\n\n  pauseAutoDriveTracking(\n    pausedTillTimestamp: number\n  ): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.pauseAutoDriveTracking(pausedTillTimestamp);\n  }\n  resumeAutoDriveTracking(): Promise<ZendriveOperationResult> {\n    return ZendriveNativeModule.resumeAutoDriveTracking();\n  }\n  isAutoTripTrackingPaused(): Promise<Boolean> {\n    return ZendriveNativeModule.isAutoTripTrackingPaused();\n  }\n  logSDKHealth(sdkHealthReason: ZendriveSDKHealthReason): Promise<void> {\n    return ZendriveNativeModule.logSDKHealth(sdkHealthReason);\n  }\n  registerZendriveCallbackEventListener(\n    handler: ZendriveCallbackEventHandler\n  ): void {\n    if (this.eventHandlers.length === 0) {\n      this.callbackHandler = (event: ZendriveCallbackEvent) => {\n        this.eventHandlers.forEach(fn => fn(event));\n      };\n      this.nativeEventHandler.register(this.callbackHandler);\n    }\n    this.eventHandlers.push(handler);\n  }\n  unregisterZendriveCallbackEventListener(\n    handler: ZendriveCallbackEventHandler\n  ): void {\n    this.eventHandlers = this.eventHandlers.filter(item => item !== handler);\n    if (this.eventHandlers.length === 0) {\n      this.nativeEventHandler.unregister();\n      this.callbackHandler = () => {};\n    }\n  }\n}\n\nconst ZendriveSDK = new ZendriveImpl();\nexport default ZendriveSDK;\n"],"mappings":"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"}