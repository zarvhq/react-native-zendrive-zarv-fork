{"version":3,"names":["ZendriveInsurancePeriod"],"sources":["Insurance.ts"],"sourcesContent":["import { ZendriveOperationResult } from './Infos';\n\n/**\n * The different insurance periods supported by the [[ZendriveInsurance]] API. Each drive belongs to exactly one of these periods.\n */\nexport enum ZendriveInsurancePeriod {\n  /**\n   * Value for drives detected in insurance period 0\n   */\n  NoPeriod = 'no-period',\n  /**\n   * Value for drives detected in insurance period 1\n   */\n  Period1 = 'period-1',\n  /**\n   * Value for drives detected in insurance period 2\n   */\n  Period2 = 'period-2',\n  /**\n   * Value for drives detected in insurance period 3\n   */\n  Period3 = 'period-3',\n}\n\n/**\n *\n * Applications which want to record Fairmatic insurance periods for a driver may use this API.\n * - All drives (automatically detected or manually started) when a period is in progress will be tagged with the period id.\n * - This period id will be made available in the reports and API that Fairmatic provides via Zendrive.\n * - Only one period may be active at a time. To switch the Fairmatic insurance period, the application can call the relevant startPeriod method directly.\n * - Switching periods or calling stopPeriod stops any active drives (automatic or manual).\n * - A drive with multiple insurance periods will be split into multiple trips for different insurance periods.\n */\nexport interface ZendriveInsurance {\n  /**\n   * Start a drive in Fairmatic insurance period 1.\n   * A manual trip with trackingId com.zendrive.sdk.internal will be started immediately.\n   * The entire duration in this period will be recorded as a single trip. If period 1 is already in progress with the same trackingId, this call will be a no-op.\n   */\n  startDriveWithPeriod1(): Promise<ZendriveOperationResult>;\n  /**\n   * Start Fairmatic insurance period 2 in the SDK.\n   * A manual trip with the given trackingId will be started immediately. The entire duration in this period will be recorded as a single trip. If period 2 is already in progress with the same trackingId, this call will be a no-op.\n   * @param trackingId  an identifier which allows identifying this drive uniquely. This identifier must be unique for this user. It may not be null or a empty string. It will be truncated to 64 characters if it is longer than 64 characters. Passing invalid trackingId is an error.\n   */\n  startDriveWithPeriod2(trackingId: String): Promise<ZendriveOperationResult>;\n  /**\n   * Start Fairmatic insurance period 3 in the SDK.\n   * A manual trip with the given trackingId will be started immediately. The entire duration in this period will be recorded as a single trip. If period 3 is already in progress with the same trackingId, this call will be a no-op.\n   * @param trackingId  an identifier which allows identifying this drive uniquely. This identifier must be unique for this user. It may not be null or a empty string. It will be truncated to 64 characters if it is longer than 64 characters. Passing invalid trackingId is an error.\n   */\n  startDriveWithPeriod3(trackingId: String): Promise<ZendriveOperationResult>;\n  /**\n   * Stop currently ongoing Fairmatic insurance period if any.\n   * Ongoing trips will be stopped and auto trip detection is turned off.\n   */\n  stopPeriod(): Promise<ZendriveOperationResult>;\n}\n"],"mappings":"AAKA,UAAYA,wBAAuB,CAiBlC,UAjBWA,uBAAuB,EAAvBA,uBAAuB,yBAAvBA,uBAAuB,uBAAvBA,uBAAuB,uBAAvBA,uBAAuB,0BAAvBA,uBAAuB,GAAvBA,uBAAuB"}